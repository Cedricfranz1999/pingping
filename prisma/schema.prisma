generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String
  Password String

  @@index([username])
}

model Product {
  id          Int               @id @default(autoincrement())
  image       String?
  name        String
  description String
  stock       Int
  price       String
  /// Variant or size label to distinguish similar products (e.g., "250g", "Large")
  size        String            @default("REGULAR")
  productType ProductType
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  categories  ProductCategory[]
  logs        ProductLog[]
  ratings     ProductRating[]
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  address   String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  username  String
  carts     Cart?
  orders    UserOrder[]
  ratings   ProductRating[]

  @@index([email])
}

model UserOrder {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  userId      Int?
  totalPrice  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      OrderStatus @default(PENDING)
  orderItems  OrderItem[]
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_orders")
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     UserOrder @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductCategory[]
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductLog {
  id         Int           @id @default(autoincrement())
  productId  Int
  employeeId Int
  action     ProductAction
  oldImage   String?
  oldStock   Int?
  oldPrice   String?
  newStock   Int?
  newPrice   String?
  timestamp  DateTime      @default(now())
  employee   Employee      @relation(fields: [employeeId], references: [id])
  product    Product       @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([employeeId])
}

model Inquiry {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  email     String?
  phone     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id         Int               @id @default(autoincrement())
  employeeId Int
  date       DateTime          @default(now())
  timeIn     DateTime?
  timeOut    DateTime?
  status     AttendanceStatus?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  employee   Employee          @relation(fields: [employeeId], references: [id])

  @@index([employeeId, date])
}

model Employee {
  id          Int          @id @default(autoincrement())
  image       String?
  firstname   String
  middlename  String?
  lastname    String
  username    String       @unique
  password    String
  address     String
  gender      String
  isactive    Boolean?     @default(true)
  canModify   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
  productLogs ProductLog[]
}

model Feedback {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  address   String
  contact   String
  star      Int
  feedback  String
  createdAt DateTime @default(now())
}

model ProductRating {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int?
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

model Order {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  email     String?
  phone     String
  subject   String?
  message   String
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

enum AttendanceStatus {
  OVERTIME
  UNDERTIME
  EXACT_TIME
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  GCASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}

enum ProductAction {
  ADD
  EDIT
  DELETE
}

enum ProductType {
  TINAPA
  PASALUBONG
}
